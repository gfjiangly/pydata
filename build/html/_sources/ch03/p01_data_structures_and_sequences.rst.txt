===============================
3.1 数据结构和序列
===============================

python的数据结构是简单但强大的。掌握它们的使用是成为一个熟练的python程序员的一个关键部分。

----------
元组
----------

一个元组是一个固定长度，不可变序列的python对象。
最简单的方式去创建一个元组是用一个逗号分隔序列的值：

.. code-block:: python

    >>> tup = 4, 5, 6
    >>> tup
    (4, 5, 6)

当你在一个复杂的表达式中定义一个元组时，它是十分有必要用一个圆括号将值围起来，如在这个例子中，在一个元组中创建元组：

.. code-block:: python

    >>> nested_tup = (4, 5, 6), (7, 8)
	
    >>> nested_tup
    ((4, 5, 6), (7, 8))

----------
列表
----------

与元组对比，列表是可变长度的，它们的内容可以原位修改。
你可以使用方括号[]或使用list类型函数：

.. code-block:: python

    >>> a_list = [2, 3, 7, None]
    >>> tup = ('foo', 'bar', 'baz')
    >>> b_list = list(tup)
    >>> b_list
    ['foo', 'bar', 'baz']
    >>> b_list[1] = 'peekaboo'
	>>> b_list
	['foo', 'peekaboo', 'baz']
	
列表和元组在语义上(semantically)是相似的（虽然元组不能被修改），在许多函数中可被替换(interchangeably)使用。

列表函数经常被作为一种具体化一个迭代器或生成表达式方式使用在数据处理：

.. code-block:: python

	In [42]: gen = range(10)
	In [43]: gen
	Out[43]: range(0, 10)
	In [44]: list(gen)
	Out[44]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

~~~~~~~~~~~~~~~~~
添加和移除元素
~~~~~~~~~~~~~~~~~

使用append方法可以追加元素到列表末端

使用insert方法可以在列表的特定位置插入一个元素

插入索引必须在0到列表长度之间，两端值也都包括(inclusive)。

注意：插入比追加计算昂贵，因为涉及的子列必须在内部移动以为新元素腾出位置。
如果你需要在一个序列的开头和结尾处插入元素，为此，你可以研究collection.deque，一个双端列队。

~~~~~~~~~~~~~~~~
连接和组合列表
~~~~~~~~~~~~~~~~

与元组相似，把两个列表加在一起使用+连接它们：

如果你已经定义了一个list，你可以使用extend方法追加多个元素到list:


~~~~~~~~~~~~~~~~~
排序
~~~~~~~~~~~~~~~~~

你可以通过调用list的sort方法原位(in-plance)排序它（没有创建一个新list）：




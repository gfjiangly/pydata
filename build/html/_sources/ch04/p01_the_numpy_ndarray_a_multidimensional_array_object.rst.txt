====================================
4.1 NumPy ndarray：一个多维数组对象
====================================

NumPy最关键的特点之一是它的N维数组对象，或者叫ndarray，在Python中是一个快速、灵活的大数据集容器。
数组使你能够使用相似的语法在整个数据块上执行数学操作，与在标量元素上有相同效果的操作。

为了让您了解NumPy如何使用类似语法对于内置Python对象的标量值启用批量计算，我首先导入NumPy并生成一个小的随机数据数组::

	In [12]: import numpy as np

	# Generate some random data
	In [13]: data = np.random.randn(2, 3)

	In [14]: data
	Out[14]:
	array([[-0.2047, 0.4789, -0.5194],
	[-0.5557, 1.9658, 1.3934]])

然后我对数据施加数学操作::

	In [15]: data * 10
	Out[15]:
	array([[ -2.0471, 4.7894, -5.1944],
	[ -5.5573, 19.6578, 13.9341]])

	In [16]: data + data
	Out[16]:
	array([[-0.4094, 0.9579, -1.0389],
	[-1.1115, 3.9316, 2.7868]])

在第一个例子中，全部元素都被乘上了10。第二个例子，在数组每个"格子"相应位置值和每个自己相加。

注：
在本章和全书，我使用标准NumPy简写import numpy as np。当然，欢迎放from numpy import \*在你的代码中，避免一直写np.，但是我不建议这样的习惯。
numpy名字空间是很大的，包含许多名字和内置Python函数冲突的函数（像min和max）。

ndarray是用于同类(**homogeneous**)数据的通用多维容器;
这是说，所有的元素必须是相同类型。每个数组有一个shape。一个表示每个维度大小的元组，dtype，描述数组数据类型的对象::

	In [17]: data.shape
	Out[17]: (2, 3)
	
	In [18]: data.dtype
	Out[18]: dtype('float64')

这章讲给你介绍基本的NumPy数组使用，会大量出现于本书的剩余部分。
虽然不必要深入理解NumPy的许多数据分析应用程序，但是精通(**proficient**)面向数组的编程和思考是成为科学计算Python专家(**guru**)的关键一步。

注：
不管在文中你是见到array、NumPy array还是ndarray，除少数例外外，它们都是指相同的东西：ndarray对象。

---------------
创建ndarray
---------------

创建一个数组的最简单方式是使用array函数。
它接受任何序列对象（包括其它数组），产生一个新的包含传入数据的NumPy数组。举例，列表是转换的好选择::

	In [19]: data1 = [6, 7.5, 8, 0, 1]

	In [20]: arr1 = np.array(data1)

	In [21]: arr1
	Out[21]: array([ 6. , 7.5, 8. , 0. , 1. ])

嵌套序列，如等长度列表的列表。将转换成一个多维数组::

	In [22]: data2 = [[1, 2, 3, 4], [5, 6, 7, 8]]

	In [23]: arr2 = np.array(data2)

	In [24]: arr2
	Out[24]:
	array([[1, 2, 3, 4],
	[5, 6, 7, 8]])

由于data2是一个列表的列表，因此从数据推断NumPy数组arr2有有两个维度的shape。
我们可以通过检查ndim和shape属性来验证这个::

	In [25]: arr2.ndim
	Out[25]: 2

	In [26]: arr2.shape
	Out[26]: (2, 4)

除非明确指定，否则np.array尝试为它创建的数组推断一个合适的数据类型。
数据类型是被储存在特殊的元数据对象dtype中；
举例，在之前的两个例子中我们有::

	In [27]: arr1.dtype
	Out[27]: dtype('float64')

	In [28]: arr2.dtype
	Out[28]: dtype('int64')



